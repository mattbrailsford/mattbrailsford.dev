---
import Layout from '../layouts/Default.astro';
import Pagination from "../components/Pagination.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import {getBlogPosts} from "../utils";
import PostLink from "../components/PostLink.astro";
import type {Post} from "../types";
import type {Page} from "astro";
import Intro from "../components/Intro.astro";
import {sortPostsByPublishedDateDesc} from "../utils";

interface Props {
	page: Page<Post>;
}

export const getStaticPaths = (async ({ paginate } : { paginate:any }) => {
	const posts: Post[] = await getBlogPosts();
	return paginate(posts.sort(sortPostsByPublishedDateDesc), {
		pageSize: 10,
	})
})

const { page } = Astro.props as Props

const schema = {
	"@context": "https://schema.org",
	"@type": "Blog",
	"headline": SITE_TITLE,
	"description": SITE_DESCRIPTION,
	"url": "https://mattbrailsford.dev",
	"publisher": {
		"@type": "Organization",
		"name": "Matt Brailsford",
		"logo": {
			"@type": "ImageObject",
			"url": "https://mattbrailsford.dev/logo.svg"
		}
	}
}
---

<Layout title={SITE_TITLE} description={SITE_DESCRIPTION} schema={schema}>
	{page.currentPage === 1 ? (
		<Intro />
	) : (
		<h1 class="visibly-hidden">Blog Posts - Page {page.currentPage}</h1>
	)}
	<div>
		<ul>
			{page.data.map(post => (
				<li class="py-7 border-b md:py-8">
					<PostLink post={post} />
				</li>
			))}
		</ul>
		{page.lastPage > 1 ? (
			<Pagination length={page.lastPage}
				currentUrl={page.url.current}
				currentPage={page.currentPage}
				firstUrl={`/`}
				prevUrl={page.url.prev}
				nextUrl={page.url.next}
				lastUrl={`/${page.lastPage}`}
			/>
		) : null}
	</div>
</Layout>