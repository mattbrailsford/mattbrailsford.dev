---
import type {PostSeries} from "../types";
import {getCollection} from "astro:content";
import {sortPostsByPublishedDateAsc} from "../utils";

export type Props = { series: PostSeries; currentSlug: string; class:string; }

const { series, currentSlug, class: klass } = Astro.props;
const posts = (await getCollection('blogPosts', (p) => p.data.series && p.data.series.id === series.id))
    .map(p => p.data)
    .sort(sortPostsByPublishedDateAsc);
const currentIndex = posts.findIndex((post) => post.slug === currentSlug);
---
<series-links>
    {posts.length > 1 && (
        <ul class={"series-links border rounded-xl " + klass}>
            <li class="bg-gray-50 p-4 font-bold rounded-t-xl"><a href={`/series/${series.id}`} class="hover:text-pink-500 transition-colors">{series.name}</a></li>
            {posts.map((post, idx) => (
                <>
                    {posts.length > 5 && idx === 2 && (
                        <li class={`toggle flex border-b last-of-type:border-0 p-4 ${ currentIndex > 1 && currentIndex < posts.length - 2 ? 'current' : '' }`}><a href='#' class="hover:text-pink-500 transition-colors">{(posts.length - 4)} more parts...</a></li>
                    )}
                    <li class={`item flex border-b last-of-type:border-0 p-4 ${ currentIndex === idx ? 'current' : '' } ${ posts.length > 5 && idx > 1 && idx < posts.length - 2 ? 'visibly-hidden' : '' }`}>
                        {post.slug === currentSlug ? (
                                <span>{post.title}</span>
                        ) : (
                                <a href={`/${post.slug}`} class="hover:text-pink-500 transition-colors">{post.title}</a>
                        )}
                    </li>
                </>
            ))}
        </ul>
    )}
</series-links>

<script>
    class SeriesLinks extends HTMLElement {
        connectedCallback() {
            const toggleRow = this.querySelector('.toggle')!;
            const toggleLink = toggleRow.querySelector('a')!;
            toggleLink.addEventListener('click', (e) => {
                e.preventDefault();
                toggleRow.classList.toggle('hidden');
                const items = this.querySelectorAll('.item.visibly-hidden');
                items.forEach((item) => {
                    item.classList.toggle('visibly-hidden');
                });
            });
        }
    }
    customElements.define('series-links', SeriesLinks);
    
    
</script>
        
<style>
    .series-links {
        counter-reset: series-link;
    }
    .series-links li.item {
        counter-increment: series-link;
    }
    .series-links li.item:before,
    .series-links li.toggle:before{
        background-color:  #f5f5f5;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        aspect-ratio: 1;
        width: 1.75rem;
        height: 1.75rem;
        border-radius: 9999px;
        margin-right: 10px;
    }
    .series-links li.item:before {
        content: counter(series-link) "";
    }
    .series-links li.toggle:before {
        content: "...";
    }
    .series-links li.current {
        font-weight: bold;
    }
    .series-links li.current:before {
        background-color: rgb(236 72 153 / var(--tw-text-opacity));
        color: white;
    }
</style>
